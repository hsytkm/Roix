// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Roix.SourceGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CodeTemplate : CodeTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated>\r\n// THIS (.cs) FILE IS GENERATED BY RoixSourceGenerator. DO N" +
                    "OT CHANGE IT.\r\n// </auto-generated>\r\n#nullable enable\r\nusing System;\r\n\r\n");
 if (!string.IsNullOrEmpty(Namespace)) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n");
 } 
            this.Write("{\r\n    readonly partial struct ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" : IEquatable<");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(">, IFormattable\r\n    {\r\n        private readonly SourceValues _values;\r\n\r\n");
 foreach (var prop in Properties) { 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Type));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));
            this.Write(" => this._values.");
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Name));
            this.Write(";\r\n\r\n");
 } 
 if (!IsConstructorDeclared) { 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeAndLowerNamesForArgs("{0} {1}")));
            this.Write(")\r\n        {\r\n            this._values = new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetLowerNames()));
            this.Write(");\r\n");
  if (HasFlag(RoixStructGeneratorOptions.WithBorder)) { 
            this.Write(" \r\n            if (this.Border.IsIncludeNegative) throw new ArgumentException(Exc" +
                    "eptionMessages.SizeIsNegative);\r\n");
  } 
  if (HasFlag(RoixStructGeneratorOptions.Validate)) { 
            this.Write(" \r\n            this.Validate(this);\r\n");
  } 
            this.Write("        }\r\n\r\n");
 } 
 if (HasFlag(RoixStructGeneratorOptions.Validate)) { 
            this.Write("        // RoixStructGeneratorOptions.Validate\r\n        private partial void Vali" +
                    "date(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value);\r\n\r\n");
 } 
            this.Write("\r\n        public void Deconstruct(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeAndLowerNames("out {0} {1}")));
            this.Write(") => (");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetLowerNames()));
            this.Write(") = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetNames()));
            this.Write(");\r\n\r\n        public bool Equals(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" other) => this == other;\r\n        public override bool Equals(object? obj) => (o" +
                    "bj is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" other) && Equals(other);\r\n        public override int GetHashCode() => HashCode." +
                    "Combine(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetNames()));
            this.Write(");\r\n        public static bool operator ==(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" left, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" right) => (");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetNames("left.{0}")));
            this.Write(") == (");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetNames("right.{0}")));
            this.Write(");\r\n        public static bool operator !=(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" left, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" right) => !(left == right);\r\n\r\n        public override string ToString() => $\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" {{ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetToString()));
            this.Write(" }}\";\r\n        public string ToString(string? format, IFormatProvider? formatProv" +
                    "ider) => $\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" {{ ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetToStringWithFormat()));
            this.Write(" }}\";\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" Zero { get; } = default;\r\n        public bool IsZero => this == Zero;\r\n        p" +
                    "ublic bool IsNotZero => !this.IsZero;\r\n\r\n");
 if (Name.Contains("Size") && !Name.Contains("Border")) { 
            this.Write("        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" X => Width;\r\n        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Y => Height;\r\n");
 } 
 if (HasFlag(RoixStructGeneratorOptions.Rect)) { 
            this.Write("        // RoixStructGeneratorOptions.Rect\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" X => Location.X;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Y => Location.Y;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Width => Size.Width;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Height => Size.Height;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Left => Location.X;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Right => Location.X + Size.Width;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Top => Location.Y;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Bottom => Location.Y + Size.Height;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixPointStructName()));
            this.Write(" TopLeft => Location;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixPointStructName()));
            this.Write(" TopRight => new(Right, Top);\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixPointStructName()));
            this.Write(" BottomLeft => new(Left, Bottom);\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixPointStructName()));
            this.Write(" BottomRight => new(Right, Bottom);\r\n\r\n        public bool IsInside(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(" border) => 0 <= Left && Right <= border.Width && 0 <= Top && Bottom <= border.He" +
                    "ight;\r\n        public bool IsOutside(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(" border) => !IsInside(border);\r\n\r\n        /// <summary>\r\n        /// Roi の左上点を優先し" +
                    "て Rect を border サイズに収めます。\r\n        /// Roi の左上点が Border の境界上に乗っている場合は、戻り値の Size " +
                    "が Zero になります。\r\n        /// </summary>\r\n        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" GetClippedRectByPointPriority(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(@" border)
        {
            if (IsInside(border)) return this;

            var left = Math.Clamp(this.Left, 0, border.Width);
            var top = Math.Clamp(this.Top, 0, border.Height);

            // 最小側にめり込んで制限された場合は正数になる（その値だけ長さを伸縮する）
            var (deltaLeft, deltaTop) = (left - this.Left, top - this.Top);

            var width = Math.Clamp(this.Width - deltaLeft, 0, border.Width - left);
            var height = Math.Clamp(this.Height - deltaTop, 0, border.Height - top);
            return new(new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixPointStructName()));
            this.Write("(left, top), new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write("(width, height));\r\n        }\r\n\r\n        /// <summary>\r\n        /// Roi のサイズを優先して " +
                    "Rect を border サイズに収めます。\r\n        /// </summary>\r\n        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" GetClippedRectBySizePriority(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(@" border)
        {
            if (IsInside(border)) return this;

            var width = Math.Clamp(this.Width, 0, border.Width);
            var height = Math.Clamp(this.Height, 0, border.Height);
            var left = Math.Clamp(this.Left - GetJutLength(this.Left, this.Right, 0, border.Width), 0, border.Width - width);
            var top = Math.Clamp(this.Top - GetJutLength(this.Top, this.Bottom, 0, border.Height), 0, border.Height - height);
            return new(new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixPointStructName()));
            this.Write("(left, top), new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(@"(width, height));

            static double GetJutLength(double left, double right, double min, double max)
            {
                // 水平方向の場合、左に食み出てたら負数、右に食み出てたら正数を返します
                if (left < min) return min - left;
                if (max < right) return right - max;
                return 0;
            }
        }

");
 } 
 if (HasFlag(RoixStructGeneratorOptions.TypeLine)) { 
            this.Write("        // RoixStructGeneratorOptions.TypeLine\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" X1 => Point1.X;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Y1 => Point1.Y;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" X2 => Point2.X;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" Y2 => Point2.Y;\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" LengthX => Math.Abs(Point2.X - Point1.X);\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" LengthY => Math.Abs(Point2.Y - Point1.Y);\r\n\r\n");
 } 
 if (HasFlag(RoixStructGeneratorOptions.XYPair)) { 
            this.Write("        // RoixStructGeneratorOptions.XYPair\r\n        public bool IsIncludeZero =" +
                    "> (X == 0 || Y == 0);\r\n        public bool IsIncludeNegative => (X < 0 || Y < 0)" +
                    ";\r\n        public bool IsInside(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(" border) => (0 <= X && X <= border.Width) && (0 <= Y && Y <= border.Height);\r\n   " +
                    "     public bool IsOutside(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(" border) => !IsInside(border);\r\n");
 } else if (HasFlag(RoixStructGeneratorOptions.TypeLine)) { 
            this.Write("        public bool IsIncludeZero => Point1.IsIncludeZero || Point2.IsIncludeZero" +
                    ";\r\n        public bool IsIncludeNegative => Point1.IsIncludeNegative || Point2.I" +
                    "sIncludeNegative;\r\n        public bool IsInside(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(" border) => Point1.IsInside(border) || Point2.IsInside(border);\r\n        public b" +
                    "ool IsOutside(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(" border) => !IsInside(border);\r\n");
 } 
            this.Write("\r\n");
 if (HasFlag(RoixStructGeneratorOptions.WithBorder)) { 
            this.Write("        // RoixStructGeneratorOptions.WithBorder\r\n        public bool IsInsideBor" +
                    "der => this.Value.IsInside(this.Border);\r\n        public bool IsOutsideBorder =>" +
                    " !this.IsInsideBorder;\r\n\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" ConvertToNewBorder(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(@" newBorder)
        {
            if (this.Border.IsEmpty || this.Border.IsZero) return this;
            if (newBorder.IsEmpty) throw new ArgumentException(ExceptionMessages.SizeIsEmpty);
            if (newBorder.IsZero) throw new ArgumentException(ExceptionMessages.SizeIsZero);

            return new(this.Value * (newBorder / this.Border), newBorder);
        }
");
  if (HasFlag(RoixStructGeneratorOptions.TypeInt)) { 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixNameWithoutInt()));
            this.Write(@" ConvertToNewBorder(in RoixSize newBorder)
        {
            if (this.Border.IsEmpty || this.Border.IsZero) return this;
            if (newBorder.IsEmpty) throw new ArgumentException(ExceptionMessages.SizeIsEmpty);
            if (newBorder.IsZero) throw new ArgumentException(ExceptionMessages.SizeIsZero);

            return new(this.Value * (newBorder / this.Border), newBorder);
        }
");
  } 
            this.Write("\r\n");
 } 
 if (!HasFlag(RoixStructGeneratorOptions.TypeInt)) { 
  if (HasFlag(RoixStructGeneratorOptions.XYPair)) { 
  /* ↓is not TypeInt && XYPair↓ */ 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixNameWithInt()));
            this.Write(" ToRoixInt(RoundingMode roundingX, RoundingMode roundingY)\r\n        {\r\n          " +
                    "  return new(X.ToInt(roundingX), Y.ToInt(roundingY));\r\n        }\r\n        public" +
                    " ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixNameWithInt()));
            this.Write(" ToRoixInt(RoundingMode rounding = RoundingMode.Floor)\r\n        {\r\n            re" +
                    "turn ToRoixInt(rounding, rounding);\r\n        }\r\n");
  } else if (HasFlag(RoixStructGeneratorOptions.Rect) || HasFlag(RoixStructGeneratorOptions.TypeLine) || HasFlag(RoixStructGeneratorOptions.WithBorder)) { 
  /* ↓is not TypeInt && (is not XYPair)↓ */ 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixNameWithInt()));
            this.Write(" ToRoixInt(RoundingMode roundingX, RoundingMode roundingY)\r\n        {\r\n          " +
                    "  return new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetNames("{0}.ToRoixInt(roundingX, roundingY)")));
            this.Write(");\r\n        }\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixNameWithInt()));
            this.Write(" ToRoixInt(RoundingMode rounding = RoundingMode.Floor)\r\n        {\r\n            re" +
                    "turn ToRoixInt(rounding, rounding);\r\n        }\r\n");
  } 
 } 
            this.Write("\r\n");
 if (HasFlag(RoixStructGeneratorOptions.HasParent)) { 
            this.Write("        // RoixStructGeneratorOptions.HasParent\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixBorderName()));
            this.Write(" ToRoixBorder(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write(" size)\r\n        {\r\n            if (size.IsIncludeNegative) throw new ArgumentExce" +
                    "ption(ExceptionMessages.SizeIsNegative);\r\n            return new(this, size);\r\n " +
                    "       }\r\n\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixBorderName()));
            this.Write(" ToRoixBorder(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" width, ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixDefaultBuiltInType()));
            this.Write(" height)\r\n        {\r\n            return this.ToRoixBorder(new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetRoixSizeStructName()));
            this.Write("(width, height));\r\n        }\r\n");
 } 
            this.Write("\r\n");
 /* ↓ArithmeticOperator1↓ */ 
 if (HasFlag(RoixStructGeneratorOptions.ArithmeticOperator1)) { 
            this.Write("        // RoixStructGeneratorOptions.ArithmeticOperator1\r\n        public static " +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator +(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value1, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value2)\r\n        {\r\n");
  if (HasFlag(RoixStructGeneratorOptions.HasEmpty)) { 
            this.Write("            if (value1.IsEmpty || value2.IsEmpty) return Empty;\r\n");
  } 
            this.Write("            return new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetOperate2Value(ArithmeticOperators.Add, "value1", "value2")));
            this.Write(");\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator -(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value1, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value2)\r\n        {\r\n");
  if (HasFlag(RoixStructGeneratorOptions.HasEmpty)) { 
            this.Write("            if (value1.IsEmpty || value2.IsEmpty) return Empty;\r\n");
  } 
            this.Write("            return new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetOperate2Value(ArithmeticOperators.Subtract, "value1", "value2")));
            this.Write(");\r\n        }\r\n");
 } 
 /* ↑ArithmeticOperator1↑ */ 
            this.Write("\r\n");
 /* ↓ArithmeticOperator2↓ */ 
 if (HasFlag(RoixStructGeneratorOptions.ArithmeticOperator2)) { 
            this.Write("        // RoixStructGeneratorOptions.ArithmeticOperator2\r\n        public static " +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator *(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value, double scalar)\r\n        {\r\n");
  if (HasFlag(RoixStructGeneratorOptions.HasEmpty)) { 
            this.Write("            if (value.IsEmpty) return Empty;\r\n");
  } 
            this.Write("            return new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetOperate1Value(ArithmeticOperators.Multiply, "value", "scalar")));
            this.Write(");\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator /(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value, double scalar)\r\n        {\r\n");
  if (HasFlag(RoixStructGeneratorOptions.HasEmpty)) { 
            this.Write("            if (value.IsEmpty) return Empty;\r\n");
  } 
            this.Write("            if (scalar == 0) throw new DivideByZeroException();\r\n            retu" +
                    "rn value * (1d / scalar);\r\n        }\r\n\r\n");
  /* ↓ArithmeticOperator2 && XYPair↓ */ 
  if (HasFlag(RoixStructGeneratorOptions.XYPair)) { 
            this.Write("        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator *(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value, in RoixRatioXY ratio)\r\n        {\r\n");
   if (HasFlag(RoixStructGeneratorOptions.HasEmpty)) { 
            this.Write("            if (value.IsEmpty) return Empty;\r\n");
   } 
            this.Write("            return new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetOperatorRoixAndRatioXY(ArithmeticOperators.Multiply, "value", "ratio")));
            this.Write(");\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator /(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value, in RoixRatioXY ratio)\r\n        {\r\n");
   if (HasFlag(RoixStructGeneratorOptions.HasEmpty)) { 
            this.Write("            if (value.IsEmpty) return Empty;\r\n");
   } 
            this.Write("            if (ratio.IsIncludeZero) throw new DivideByZeroException();\r\n        " +
                    "    return new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetOperatorRoixAndRatioXY(ArithmeticOperators.Divide, "value", "ratio")));
            this.Write(");\r\n        }\r\n\r\n        public static RoixRatioXY operator /(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value1, in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value2)\r\n        {\r\n");
   if (HasFlag(RoixStructGeneratorOptions.HasEmpty)) { 
            this.Write("            if (value.IsEmpty) return Empty;\r\n");
   } 
            this.Write("            if (value2.IsIncludeZero) throw new DivideByZeroException();\r\n       " +
                    "     return new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetOperate2Value(ArithmeticOperators.Divide, "value1", "value2")));
            this.Write(");\r\n        }\r\n");
  /* ↓ArithmeticOperator2 && (is not XYPair)↓ */ 
  } else { 
            this.Write("        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator *(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value, in RoixRatioXY ratio)\r\n        {\r\n");
   if (HasFlag(RoixStructGeneratorOptions.HasEmpty)) { 
            this.Write("            if (value.IsEmpty) return Empty;\r\n");
   } 
            this.Write("            return new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetOperatorRoixAndRatio(ArithmeticOperators.Multiply, "value", "ratio")));
            this.Write(");\r\n        }\r\n\r\n        public static ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" operator /(in ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            this.Write(" value, in RoixRatioXY ratio)\r\n        {\r\n");
   if (HasFlag(RoixStructGeneratorOptions.HasEmpty)) { 
            this.Write("            if (value.IsEmpty) return Empty;\r\n");
   } 
            this.Write("            if (ratio.IsIncludeZero) throw new DivideByZeroException();\r\n        " +
                    "    return new(");
            this.Write(this.ToStringHelper.ToStringWithCulture(GetOperatorRoixAndRatio(ArithmeticOperators.Divide, "value", "ratio")));
            this.Write(");\r\n        }\r\n");
  } 
 } 
 /* ↑ArithmeticOperator2↑ */ 
            this.Write("\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class CodeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
